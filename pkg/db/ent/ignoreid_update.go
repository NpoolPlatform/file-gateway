// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/file-gateway/pkg/db/ent/ignoreid"
	"github.com/NpoolPlatform/file-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// IgnoreIDUpdate is the builder for updating IgnoreID entities.
type IgnoreIDUpdate struct {
	config
	hooks     []Hook
	mutation  *IgnoreIDMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IgnoreIDUpdate builder.
func (iiu *IgnoreIDUpdate) Where(ps ...predicate.IgnoreID) *IgnoreIDUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetCreatedAt sets the "created_at" field.
func (iiu *IgnoreIDUpdate) SetCreatedAt(u uint32) *IgnoreIDUpdate {
	iiu.mutation.ResetCreatedAt()
	iiu.mutation.SetCreatedAt(u)
	return iiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iiu *IgnoreIDUpdate) SetNillableCreatedAt(u *uint32) *IgnoreIDUpdate {
	if u != nil {
		iiu.SetCreatedAt(*u)
	}
	return iiu
}

// AddCreatedAt adds u to the "created_at" field.
func (iiu *IgnoreIDUpdate) AddCreatedAt(u int32) *IgnoreIDUpdate {
	iiu.mutation.AddCreatedAt(u)
	return iiu
}

// SetUpdatedAt sets the "updated_at" field.
func (iiu *IgnoreIDUpdate) SetUpdatedAt(u uint32) *IgnoreIDUpdate {
	iiu.mutation.ResetUpdatedAt()
	iiu.mutation.SetUpdatedAt(u)
	return iiu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (iiu *IgnoreIDUpdate) AddUpdatedAt(u int32) *IgnoreIDUpdate {
	iiu.mutation.AddUpdatedAt(u)
	return iiu
}

// SetDeletedAt sets the "deleted_at" field.
func (iiu *IgnoreIDUpdate) SetDeletedAt(u uint32) *IgnoreIDUpdate {
	iiu.mutation.ResetDeletedAt()
	iiu.mutation.SetDeletedAt(u)
	return iiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iiu *IgnoreIDUpdate) SetNillableDeletedAt(u *uint32) *IgnoreIDUpdate {
	if u != nil {
		iiu.SetDeletedAt(*u)
	}
	return iiu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (iiu *IgnoreIDUpdate) AddDeletedAt(u int32) *IgnoreIDUpdate {
	iiu.mutation.AddDeletedAt(u)
	return iiu
}

// SetEntID sets the "ent_id" field.
func (iiu *IgnoreIDUpdate) SetEntID(u uuid.UUID) *IgnoreIDUpdate {
	iiu.mutation.SetEntID(u)
	return iiu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (iiu *IgnoreIDUpdate) SetNillableEntID(u *uuid.UUID) *IgnoreIDUpdate {
	if u != nil {
		iiu.SetEntID(*u)
	}
	return iiu
}

// SetSampleCol sets the "sample_col" field.
func (iiu *IgnoreIDUpdate) SetSampleCol(s string) *IgnoreIDUpdate {
	iiu.mutation.SetSampleCol(s)
	return iiu
}

// SetNillableSampleCol sets the "sample_col" field if the given value is not nil.
func (iiu *IgnoreIDUpdate) SetNillableSampleCol(s *string) *IgnoreIDUpdate {
	if s != nil {
		iiu.SetSampleCol(*s)
	}
	return iiu
}

// ClearSampleCol clears the value of the "sample_col" field.
func (iiu *IgnoreIDUpdate) ClearSampleCol() *IgnoreIDUpdate {
	iiu.mutation.ClearSampleCol()
	return iiu
}

// Mutation returns the IgnoreIDMutation object of the builder.
func (iiu *IgnoreIDUpdate) Mutation() *IgnoreIDMutation {
	return iiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *IgnoreIDUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := iiu.defaults(); err != nil {
		return 0, err
	}
	if len(iiu.hooks) == 0 {
		affected, err = iiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IgnoreIDMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiu.mutation = mutation
			affected, err = iiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iiu.hooks) - 1; i >= 0; i-- {
			if iiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *IgnoreIDUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *IgnoreIDUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *IgnoreIDUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiu *IgnoreIDUpdate) defaults() error {
	if _, ok := iiu.mutation.UpdatedAt(); !ok {
		if ignoreid.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ignoreid.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ignoreid.UpdateDefaultUpdatedAt()
		iiu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iiu *IgnoreIDUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IgnoreIDUpdate {
	iiu.modifiers = append(iiu.modifiers, modifiers...)
	return iiu
}

func (iiu *IgnoreIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ignoreid.Table,
			Columns: ignoreid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: ignoreid.FieldID,
			},
		},
	}
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldCreatedAt,
		})
	}
	if value, ok := iiu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldCreatedAt,
		})
	}
	if value, ok := iiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldUpdatedAt,
		})
	}
	if value, ok := iiu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldUpdatedAt,
		})
	}
	if value, ok := iiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldDeletedAt,
		})
	}
	if value, ok := iiu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldDeletedAt,
		})
	}
	if value, ok := iiu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ignoreid.FieldEntID,
		})
	}
	if value, ok := iiu.mutation.SampleCol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ignoreid.FieldSampleCol,
		})
	}
	if iiu.mutation.SampleColCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ignoreid.FieldSampleCol,
		})
	}
	_spec.Modifiers = iiu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ignoreid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// IgnoreIDUpdateOne is the builder for updating a single IgnoreID entity.
type IgnoreIDUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IgnoreIDMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (iiuo *IgnoreIDUpdateOne) SetCreatedAt(u uint32) *IgnoreIDUpdateOne {
	iiuo.mutation.ResetCreatedAt()
	iiuo.mutation.SetCreatedAt(u)
	return iiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iiuo *IgnoreIDUpdateOne) SetNillableCreatedAt(u *uint32) *IgnoreIDUpdateOne {
	if u != nil {
		iiuo.SetCreatedAt(*u)
	}
	return iiuo
}

// AddCreatedAt adds u to the "created_at" field.
func (iiuo *IgnoreIDUpdateOne) AddCreatedAt(u int32) *IgnoreIDUpdateOne {
	iiuo.mutation.AddCreatedAt(u)
	return iiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iiuo *IgnoreIDUpdateOne) SetUpdatedAt(u uint32) *IgnoreIDUpdateOne {
	iiuo.mutation.ResetUpdatedAt()
	iiuo.mutation.SetUpdatedAt(u)
	return iiuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (iiuo *IgnoreIDUpdateOne) AddUpdatedAt(u int32) *IgnoreIDUpdateOne {
	iiuo.mutation.AddUpdatedAt(u)
	return iiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iiuo *IgnoreIDUpdateOne) SetDeletedAt(u uint32) *IgnoreIDUpdateOne {
	iiuo.mutation.ResetDeletedAt()
	iiuo.mutation.SetDeletedAt(u)
	return iiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iiuo *IgnoreIDUpdateOne) SetNillableDeletedAt(u *uint32) *IgnoreIDUpdateOne {
	if u != nil {
		iiuo.SetDeletedAt(*u)
	}
	return iiuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (iiuo *IgnoreIDUpdateOne) AddDeletedAt(u int32) *IgnoreIDUpdateOne {
	iiuo.mutation.AddDeletedAt(u)
	return iiuo
}

// SetEntID sets the "ent_id" field.
func (iiuo *IgnoreIDUpdateOne) SetEntID(u uuid.UUID) *IgnoreIDUpdateOne {
	iiuo.mutation.SetEntID(u)
	return iiuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (iiuo *IgnoreIDUpdateOne) SetNillableEntID(u *uuid.UUID) *IgnoreIDUpdateOne {
	if u != nil {
		iiuo.SetEntID(*u)
	}
	return iiuo
}

// SetSampleCol sets the "sample_col" field.
func (iiuo *IgnoreIDUpdateOne) SetSampleCol(s string) *IgnoreIDUpdateOne {
	iiuo.mutation.SetSampleCol(s)
	return iiuo
}

// SetNillableSampleCol sets the "sample_col" field if the given value is not nil.
func (iiuo *IgnoreIDUpdateOne) SetNillableSampleCol(s *string) *IgnoreIDUpdateOne {
	if s != nil {
		iiuo.SetSampleCol(*s)
	}
	return iiuo
}

// ClearSampleCol clears the value of the "sample_col" field.
func (iiuo *IgnoreIDUpdateOne) ClearSampleCol() *IgnoreIDUpdateOne {
	iiuo.mutation.ClearSampleCol()
	return iiuo
}

// Mutation returns the IgnoreIDMutation object of the builder.
func (iiuo *IgnoreIDUpdateOne) Mutation() *IgnoreIDMutation {
	return iiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *IgnoreIDUpdateOne) Select(field string, fields ...string) *IgnoreIDUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated IgnoreID entity.
func (iiuo *IgnoreIDUpdateOne) Save(ctx context.Context) (*IgnoreID, error) {
	var (
		err  error
		node *IgnoreID
	)
	if err := iiuo.defaults(); err != nil {
		return nil, err
	}
	if len(iiuo.hooks) == 0 {
		node, err = iiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IgnoreIDMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiuo.mutation = mutation
			node, err = iiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iiuo.hooks) - 1; i >= 0; i-- {
			if iiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IgnoreID)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IgnoreIDMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *IgnoreIDUpdateOne) SaveX(ctx context.Context) *IgnoreID {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *IgnoreIDUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *IgnoreIDUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiuo *IgnoreIDUpdateOne) defaults() error {
	if _, ok := iiuo.mutation.UpdatedAt(); !ok {
		if ignoreid.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ignoreid.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ignoreid.UpdateDefaultUpdatedAt()
		iiuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iiuo *IgnoreIDUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IgnoreIDUpdateOne {
	iiuo.modifiers = append(iiuo.modifiers, modifiers...)
	return iiuo
}

func (iiuo *IgnoreIDUpdateOne) sqlSave(ctx context.Context) (_node *IgnoreID, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ignoreid.Table,
			Columns: ignoreid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: ignoreid.FieldID,
			},
		},
	}
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IgnoreID.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ignoreid.FieldID)
		for _, f := range fields {
			if !ignoreid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ignoreid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldCreatedAt,
		})
	}
	if value, ok := iiuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldCreatedAt,
		})
	}
	if value, ok := iiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldUpdatedAt,
		})
	}
	if value, ok := iiuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldUpdatedAt,
		})
	}
	if value, ok := iiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldDeletedAt,
		})
	}
	if value, ok := iiuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: ignoreid.FieldDeletedAt,
		})
	}
	if value, ok := iiuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ignoreid.FieldEntID,
		})
	}
	if value, ok := iiuo.mutation.SampleCol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ignoreid.FieldSampleCol,
		})
	}
	if iiuo.mutation.SampleColCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ignoreid.FieldSampleCol,
		})
	}
	_spec.Modifiers = iiuo.modifiers
	_node = &IgnoreID{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ignoreid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
