// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/file-gateway/pkg/db/ent/detail"
	"github.com/google/uuid"
)

// Detail is the model entity for the Detail schema.
type Detail struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// SampleCol holds the value of the "sample_col" field.
	SampleCol string `json:"sample_col,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Detail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case detail.FieldID, detail.FieldCreatedAt, detail.FieldUpdatedAt, detail.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case detail.FieldSampleCol:
			values[i] = new(sql.NullString)
		case detail.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Detail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Detail fields.
func (d *Detail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case detail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint32(value.Int64)
		case detail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = uint32(value.Int64)
			}
		case detail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = uint32(value.Int64)
			}
		case detail.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = uint32(value.Int64)
			}
		case detail.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				d.EntID = *value
			}
		case detail.FieldSampleCol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_col", values[i])
			} else if value.Valid {
				d.SampleCol = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Detail.
// Note that you need to call Detail.Unwrap() before calling this method if this Detail
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Detail) Update() *DetailUpdateOne {
	return (&DetailClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Detail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Detail) Unwrap() *Detail {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Detail is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Detail) String() string {
	var builder strings.Builder
	builder.WriteString("Detail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", d.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", d.EntID))
	builder.WriteString(", ")
	builder.WriteString("sample_col=")
	builder.WriteString(d.SampleCol)
	builder.WriteByte(')')
	return builder.String()
}

// Details is a parsable slice of Detail.
type Details []*Detail

func (d Details) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
